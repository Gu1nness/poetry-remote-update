name: '🏗 Create a PR updating a python library of a repository'
description: 'Tool for managing your Python libraries across multiple repositories.'
branding:
  icon: 'box'
  color: 'yellow'
inputs:
  library:  
    description: 'The name of the library'
    required: true
  new_version:  
    description: 'The new version to update to'
    required: true
  groups:
    description: 'A list of groups to update (as a json list)'
    required: false
    default: '["main"]'
  repository:
    description: 'The repository full name where to create the PR'
    required: true
  branch:
    description: 'The branch where to create the PR to'
    required: true
  new_branch:
    description: 'The branch we need to create'
    required: true
  python_version:
    description: 'The python version used on the repository'
    required: true
  pat:
    description: 'Github Personal token REPO scope'
    required: true
  ssh_private_key:
    description: 'SSH key to pull libraries'
    required: false
    default: ''
  ssh_library_url:
    description: 'SSH url from the library to pull'
    required: false
    default: ''
  draft:
    description: 'Status of the PR (false, true or always-true)'
    required: false
    default: 'true'

outputs:
  pull-request-number:
    description: "The PR number"
    value: ${{ steps.cpr.outputs.pull-request-number }}
  pull-request-url:
    description: "The PR URL"
    value: ${{ steps.cpr.outputs.pull-request-url }}
  pull-request-operation:
    description: "The action operated on the PR"
    value: ${{ steps.cpr.outputs.pull-request-operation }}

runs:

  using: "composite"

  steps:
  
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Setup Poetry
      uses: snok/install-poetry@v1

    - name: Prepare SSH Key
      if: ${{ inputs.ssh_private_key != '' }}
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ inputs.ssh_private_key }}

    - name: Update library
      if: ${{ inputs.ssh_private_key == '' }}
      shell: bash
      run: |
        poetry source add --priority=supplemental testpypi https://test.pypi.org/simple/
        for group in $(echo '${{ inputs.groups }}' | jq -c '.[]'); do
          poetry remove ${{ inputs.library }} --group=$group
          poetry add ${{ inputs.library }}=="${{ inputs.new_version }}" --group=$group --source testpypi
        done
    
    - name: Update SSH library
      if: ${{ inputs.ssh_private_key != '' }}
      shell: bash
      run: |
        for group in $(echo '${{ inputs.groups }}' | jq -c '.[]'); do
          poetry remove ${{ inputs.library }} --group=$group
          poetry add ${{ inputs.ssh_library_url }} --group=$group
        done

    - name: Compute branch name
      shell: bash
      run: |
        echo "NEW_REVISION=$(echo ${{ inputs.new_branch}} | sed s'/\//-/')" >> $GITHUB_ENV

      
    - name: Create pull request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ inputs.pat }}
        branch: 'chore/update-${{ inputs.library }}-to-${{ env.NEW_REVISION}}'
        commit-message: 'Update ${{ inputs.library }} to ${{ inputs.new_version }} version'
        title: '[CI] Update ${{ inputs.library }} to ${{ inputs.new_version }} version'
        body: 'This PR updates the ${{ inputs.library }} to ${{ inputs.new_version }} version.'
        base: ${{ inputs.branch }}
        draft: ${{inputs.draft }}
      id: cpr

    - name: Setup outputs
      shell: bash
      run: |
        echo "pull-request-number=${{ steps.cpr.outputs.pull-request-number }}" >> $GITHUB_OUTPUT
        echo "pull-request-url=${{ steps.cpr.outputs.pull-request-url }}" >> $GITHUB_OUTPUT
        echo "pull-request-operation=${{ steps.cpr.outputs.pull-request-operation }}" >> $GITHUB_OUTPUT
